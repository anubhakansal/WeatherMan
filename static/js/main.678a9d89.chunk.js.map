{"version":3,"sources":["HeaderSearch.js","App.js","serviceWorker.js","index.js"],"names":["HeaderSearch","props","handleOnInputChange","event","preventDefault","city","target","value","setState","message","fetchSearchResult","result","undefined","searchUrlCity","searchUrl","axios","get","cancelToken","cancel","token","then","CityResponse","console","log","data","length","woeid","Response","resultNotFound","render","catch","error","isCancel","list","forEach","d","title","renderSearchResult","state","consolidated_weather","id","className","href","time","split","sun_rise","sun_set","map","cw","i","applicable_date","data-title","data-original-title","weather_state_name","Math","floor","wind_speed","humidity","visibility","air_pressure","predictability","searchResult","this","prevProps","prevState","type","onSubmit","placeholder","name","Component","App","weather","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.678a9d89.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './HeaderSearch.css';\r\n\r\nclass HeaderSearch extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchResult =\r\n        {\r\n            city: '',\r\n            result: {},\r\n            message: ''\r\n        }\r\n        this.cancel = '';\r\n        // this.handleOnLoad();\r\n    };\r\n\r\n    handleOnInputChange = (event) => {\r\n        debugger;\r\n        event.preventDefault();\r\n        const city = event.target[0].value;\r\n\r\n        if (!city) {\r\n            this.setState({ city, result: {}, message: '' });\r\n        }\r\n        else {\r\n            this.setState({ city, message: '' }, () => { this.fetchSearchResult(city) });\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        debugger;\r\n        this.setState({ city: 'New Delhi', result: undefined, message: '' }, () => { this.fetchSearchResult('New Delhi') });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        debugger;\r\n        console.log(\"Old: \" + prevState);\r\n        console.log(\"New: \" + this.state);\r\n        console.log(\"Old: \" + prevProps);\r\n        console.log(\"New: \" + this.props);\r\n    }\r\n\r\n    fetchSearchResult = (city) => {\r\n        debugger;\r\n        this.setState({ city: '', result: undefined, message: '' });\r\n        const searchUrlCity = 'https://cors-anywhere.herokuapp.com/www.metaweather.com/api/location/search/?query=' + city;\r\n        var searchUrl = 'https://cors-anywhere.herokuapp.com/www.metaweather.com/api/location/';\r\n\r\n\r\n        // if (this.cancel) {\r\n        //     this.cancel.cancel();\r\n        // }\r\n\r\n\r\n        axios\r\n            .get(searchUrlCity, { cancelToken: this.cancel.token })\r\n            .then(CityResponse => {\r\n                debugger;\r\n                console.log(CityResponse.data);\r\n                if (CityResponse.data.length == 1) {\r\n                    searchUrl = searchUrl + CityResponse.data[0].woeid;\r\n                    axios\r\n                        .get(searchUrl, { cancelToken: this.cancel.token })\r\n                        .then(Response => {\r\n                            debugger;\r\n                            const resultNotFound = !Response\r\n                                ? 'No record found for this city. Please try a different city.'\r\n                                : '';\r\n                            this.setState({ result: Response.data, message: resultNotFound, city: city }, () => { this.render() });\r\n                        })\r\n                        .catch(error => {\r\n                            debugger;\r\n                            if (axios.isCancel(error) || error) {\r\n                                this.setState({ message: 'Failed to fetch data. Please check withthe administrator.', result: {} })\r\n                            }\r\n                        })\r\n                }\r\n                else if (CityResponse.data.length > 1) {\r\n                    debugger;\r\n                    var list = '';\r\n                    CityResponse.data.forEach(d => {\r\n                        list += \"'\" + d.title + \"' \";\r\n                    });\r\n                    this.setState({ message: 'There are more than one city with this name : ' + list }, () => { this.render() });\r\n                }\r\n                else {\r\n                    debugger;\r\n                    this.setState({ message: 'There is no city with the specified name in our database. Please try a different city.' }, () => { this.render() });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                debugger;\r\n                if (axios.isCancel(error) || error) {\r\n                    this.setState({ message: 'Failed to fetch data. Please check withthe administrator.', result: {} })\r\n                }\r\n            })\r\n        // axios\r\n        //     .get(searchUrl, { cancelToken: this.cancel.token })\r\n        //     .then(Response => {\r\n        //         debugger;\r\n        //         const resultNotFound = !Response\r\n        //             ? 'No record found for this city. Please try a different city.'\r\n        //             : '';\r\n        //         this.setState({ result: Response.data, message: resultNotFound, city: city }, () => { this.render() });\r\n        //     })\r\n        //     .catch(error => {\r\n        //         debugger;\r\n        //         if (axios.isCancel(error) || error) {\r\n        //             this.setState({ message: 'Failed to fetch data. Please check withthe administrator.' })\r\n        //         }\r\n        //     })\r\n        //this.cancel = axios.CancelToken.source();\r\n    };\r\n\r\n    renderSearchResult = () => {\r\n        debugger;\r\n        if (this.state != null) {\r\n            if (this.state.result != undefined) {\r\n                debugger;\r\n                const { result } = this.state;\r\n                console.log(result.consolidated_weather);\r\n                //if (Object.keys(result).consolidated_weather.length && result.consolidated_weather.length) {\r\n                return (\r\n                    <div id=\"Display\">\r\n                        <div className=\"row centre\">\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 location\">\r\n                                <h1>{result.title}</h1>, <a href=\"\"></a>\r\n                                <dl className=\"dl-horizontal pull-right\">\r\n                                    <dt>Time</dt>\r\n                                    <dd>{result.time.split('T')[0] + ' ' + result.time.split('T')[1].split('.')[0]}</dd>\r\n                                    <dt>Sunrise</dt>\r\n                                    <dd>{result.sun_rise.split('T')[0] + ' ' + result.sun_rise.split('T')[1].split('.')[0]}</dd>\r\n                                    <dt>Sunset</dt>\r\n                                    <dd>{result.sun_set.split('T')[0] + ' ' + result.sun_set.split('T')[1].split('.')[0]}</dd>\r\n                                </dl>\r\n                            </div>\r\n                        </div>\r\n                        <hr />\r\n                        <div className=\"row weather weather-lrg\">\r\n                            {this.state.result.consolidated_weather.map((cw, i) => {\r\n                                return (\r\n                                    <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4 \">\r\n                                        <h2>\r\n                                            <a>\r\n                                                {cw.applicable_date}\r\n                                            </a>\r\n                                        </h2>\r\n                                        <dl>\r\n                                            <dt className=\"humidity\">Weather</dt>\r\n                                            <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\r\n                                                <span className=\"hidden-xs hidden-sm\">{cw.weather_state_name}</span>\r\n                                            </dd>\r\n                                            <dt>Temperature</dt>\r\n                                            <dd>\r\n                                                Max: {cw.weather_state_name}°C\r\n                                                     <br />\r\n                                                    Min: {cw.weather_state_name}°C\r\n                                            </dd>\r\n                                            <dt className=\"humidity\">Wind Speed</dt>\r\n                                            <dd>{Math.floor(cw.wind_speed)}mph</dd>\r\n                                            <dt className=\"humidity\">Humidity</dt>\r\n                                            <dd>{cw.humidity}%</dd>\r\n                                            <dt className=\"visibility\">Visibility</dt>\r\n                                            <dd>{Math.floor(cw.visibility)} miles</dd>\r\n                                            <dt className=\"dewpoint\">Pressure</dt>\r\n                                            <dd>{cw.air_pressure}mb</dd>\r\n                                            <dt className=\"predictability\">Confidence</dt>\r\n                                            <dd>{cw.predictability}%</dd>\r\n                                        </dl>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )\r\n                //}\r\n            }\r\n            else {\r\n                debugger;\r\n                return (\r\n                    <div id=\"Display\">\r\n                        <div className=\"row\">\r\n                            <h1>\r\n                                {this.state.message}\r\n                            </h1>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        debugger;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"fixed-top wrap\">\r\n                    <div id=\"top\">\r\n                        <ul id=\"navigation\">\r\n                            <li><a className=\"logo\" href=\"./index.html\" target=\"_self\"><input type=\"button\" value=\"WEATHERMAN\" /></a>\r\n                            </li>\r\n                            <form className=\"example\" onSubmit={this.handleOnInputChange}>\r\n                                <input id=\"txtsearch\" type=\"text\" placeholder=\"Search...\" name=\"search2\" />\r\n                                <button id=\"btnSearch\" type=\"submit\" ><i className=\"fa fa-search\"></i></button>\r\n                            </form>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                {this.renderSearchResult()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderSearch;","import React, { Component } from 'react';\nimport './App.css';\nimport HeaderSearch from './HeaderSearch';\nimport axios from 'axios'\n\n\nclass App extends Component {\n  state = {\n    weather: []\n  }\n\n  componentDidMount() {\n    // var cityname = '';\n    // axios.get('https://cors-anywhere.herokuapp.com/www.metaweather.com/api/location/search/?query=' + cityname).then(Response => {\n    //   const search = Response.data;\n    //   this.setState({ search });\n    //   console.log(search)\n    // })\n  }\n  render() {\n    return (\n      <div>\n        <HeaderSearch />\n      </div>\n      //   <div className=\"container\">\n\n\n      //     <div id=\"Display\">\n      //       <div className=\"row\">\n      //         <div className=\"col-lg-6 col-md-6 col-sm-6 col-xs-6 location\">\n      //           <h1>San Fransisco</h1>, <a href=\"\"></a>\n      //         </div>\n      //         <div className=\"col-lg-6 col-md-6 col-sm-6 col-xs-6\" id=\"times\">\n      //           <dl className=\"dl-horizontal pull-right\">\n      //             <dt>Time</dt>\n      //             <dd></dd>\n      //             <dt>Sunrise</dt>\n      //             <dd></dd>\n      //             <dt>Sunset</dt>\n      //             <dd></dd>\n      //           </dl>\n      //         </div>\n      //       </div>\n      //       <div className=\"row weather weather-lrg\">\n      //         <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4 \" data-date=\"2020-7-4\">\n      //           <h2>\n      //             <a href=\"/2487956/2020/7/4/\">\n      //               Today\n      //       </a>\n      //           </h2>\n      //           <dl>\n      //             <dt>Weather</dt>\n      //             <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\n      //               <div className=\"state-icon-lrg state-c\"></div>\n      //               <span className=\"hidden-xs hidden-sm\">Clear</span>\n      //             </dd>\n      //             <dt>Temperature</dt>\n      //             <dd>\n      //               Max: 20°C<br />\n      //             Min: 13°C\n      //         </dd>\n      //             <dt>Wind</dt>\n      //             <dd className=\"wind\">\n      //               <span className=\"dir dir-w\" title=\"W\"></span>\n      //               6mph\n      //           </dd>\n      //             <dt className=\"humidity\">Humidity</dt>\n      //             <dd>57%</dd>\n      //             <dt className=\"visibility\">Visibility</dt>\n      //             <dd>15.0 miles</dd>\n      //             <dt className=\"dewpoint\">Pressure</dt>\n      //             <dd>1018mb</dd>\n      //             <dt className=\"predictability\">Confidence</dt>\n      //             <dd>68%</dd>\n      //           </dl>\n      //         </div>\n      //         <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4  tomorrow\" data-date=\"2020-7-5\">\n      //           <h2>\n      //             <a href=\"/2487956/2020/7/5/\">\n      //               Tomorrow\n      //       </a>\n      //           </h2>\n      //           <dl>\n      //             <dt>Weather</dt>\n      //             <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\n      //               <div className=\"state-icon-lrg state-c\"></div>\n      //               <span className=\"hidden-xs hidden-sm\">Clear</span>\n      //             </dd>\n      //             <dt>Temperature</dt>\n      //             <dd>\n      //               Max: 19°C<br />\n      //             Min: 12°C\n      //         </dd>\n      //             <dt>Wind</dt>\n      //             <dd className=\"wind\">\n      //               <span className=\"dir dir-w\" title=\"W\"></span>\n      //               8mph\n      //           </dd>\n      //             <dt className=\"humidity\">Humidity</dt>\n      //             <dd>60%</dd>\n      //             <dt className=\"visibility\">Visibility</dt>\n      //             <dd>14.5 miles</dd>\n      //             <dt className=\"dewpoint\">Pressure</dt>\n      //             <dd>1016mb</dd>\n      //             <dt className=\"predictability\">Confidence</dt>\n      //             <dd>58%</dd>\n      //           </dl>\n      //         </div>\n      //         <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4 \" data-date=\"2020-7-6\">\n      //           <h2>\n      //             <a href=\"/2487956/2020/7/6/\">\n      //               Mon 6 Jul\n      //       </a>\n      //           </h2>\n      //           <dl>\n      //             <dt>Weather</dt>\n      //             <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\n      //               <div className=\"state-icon-lrg state-c\"></div>\n      //               <span className=\"hidden-xs hidden-sm\">Clear</span>\n      //             </dd>\n      //             <dt>Temperature</dt>\n      //             <dd>\n      //               Max: 17°C<br />\n      //             Min: 12°C\n      //         </dd>\n      //             <dt>Wind</dt>\n      //             <dd className=\"wind\">\n      //               <span className=\"dir dir-w\" title=\"W\"></span>\n      //               11mph\n      //           </dd>\n      //             <dt className=\"humidity\">Humidity</dt>\n      //             <dd>67%</dd>\n      //             <dt className=\"visibility\">Visibility</dt>\n      //             <dd>14.6 miles</dd>\n      //             <dt className=\"dewpoint\">Pressure</dt>\n      //             <dd>1015mb</dd>\n      //             <dt className=\"predictability\">Confidence</dt>\n      //             <dd>48%</dd>\n      //           </dl>\n      //         </div>\n      //         <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4 \" data-date=\"2020-7-7\">\n      //           <h2>\n      //             <a href=\"/2487956/2020/7/7/\">\n      //               Tue 7 Jul\n      //       </a>\n      //           </h2>\n      //           <dl>\n      //             <dt>Weather</dt>\n      //             <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\n      //               <div className=\"state-icon-lrg state-c\"></div>\n      //               <span className=\"hidden-xs hidden-sm\">Clear</span>\n      //             </dd>\n      //             <dt>Temperature</dt>\n      //             <dd>\n      //               Max: 18°C<br />\n      //             Min: 12°C\n      //         </dd>\n      //             <dt>Wind</dt>\n      //             <dd className=\"wind\">\n      //               <span className=\"dir dir-w\" title=\"W\"></span>\n      //               9mph\n      //           </dd>\n\n\n\n      //             <dt className=\"humidity\">Humidity</dt>\n      //             <dd>65%</dd>\n\n\n\n      //             <dt className=\"visibility\">Visibility</dt>\n      //             <dd>14.6 miles</dd>\n\n\n\n      //             <dt className=\"dewpoint\">Pressure</dt>\n      //             <dd>1014mb</dd>\n\n\n      //             <dt className=\"predictability\">Confidence</dt>\n      //             <dd>38%</dd>\n\n      //           </dl>\n\n\n      //         </div>\n\n\n\n      //         <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4 \" data-date=\"2020-7-8\">\n      //           <h2>\n      //             <a href=\"/2487956/2020/7/8/\">\n      //               Wed 8 Jul\n      //       </a>\n      //           </h2>\n      //           <dl>\n      //             <dt>Weather</dt>\n      //             <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\n      //               <div className=\"state-icon-lrg state-lc\"></div>\n      //               <span className=\"hidden-xs hidden-sm\">Light Cloud</span>\n      //             </dd>\n      //             <dt>Temperature</dt>\n      //             <dd>\n      //               Max: 17°C<br />\n      //             Min: 12°C\n      //         </dd>\n      //             <dt>Wind</dt>\n      //             <dd className=\"wind\">\n      //               <span className=\"dir dir-w\" title=\"W\"></span>\n      //               7mph\n      //           </dd>\n      //             <dt className=\"humidity\">Humidity</dt>\n      //             <dd>71%</dd>\n      //             <dt className=\"visibility\">Visibility</dt>\n      //             <dd>14.0 miles</dd>\n      //             <dt className=\"dewpoint\">Pressure</dt>\n      //             <dd>1013mb</dd>\n      //             <dt className=\"predictability\">Confidence</dt>\n      //             <dd>30%</dd>\n      //           </dl>\n      //         </div>\n      //         <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-4 \" data-date=\"2020-7-9\">\n      //           <h2>\n      //             <a href=\"/2487956/2020/7/9/\">\n      //               Thu 9 Jul\n      //       </a>\n      //           </h2>\n      //           <dl>\n      //             <dt>Weather</dt>\n      //             <dd className=\"weatherstate\" data-title=\"Forecasts\" data-original-title=\"\" title=\"\">\n      //               <div className=\"state-icon-lrg state-c\"></div>\n      //               <span className=\"hidden-xs hidden-sm\">Clear</span>\n      //             </dd>\n\n      //             <dt>Temperature</dt>\n      //             <dd>\n      //               Max: 18°C<br />\n      //             Min: 12°C\n      //         </dd>\n      //             <dt>Wind</dt>\n      //             <dd className=\"wind\">\n      //               <span className=\"dir dir-w\" title=\"W\"></span>\n      //               8mph\n      //           </dd>\n      //             <dt className=\"humidity\">Humidity</dt>\n      //             <dd>77%</dd>\n      //             <dt className=\"visibility\">Visibility</dt>\n      //             <dd>10.0 miles</dd>\n      //             <dt className=\"dewpoint\">Pressure</dt>\n      //             <dd>1015mb</dd>\n      //             <dt className=\"predictability\">Confidence</dt>\n      //             <dd>18%</dd>\n      //           </dl>\n      //         </div>\n      //       </div>\n      //     </div>\n      //   </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}